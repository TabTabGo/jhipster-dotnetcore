<%#
 Copyright 2019-2021 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%
let hasDto = false; // viewModel === 'mapstruct';
let hasService = service === 'serviceImpl';
%>
<%_ if (cqrsEnabled) { _%>
using MediatR;
<%_ } _%>
namespace <%= namespace %>.Api.Controllers;

[Authorize]
[Route("api/v{version:apiVersion}/<%= kebabCasedEntityClassPlural %>")]
[ApiController]
public class <%= pascalizedEntityClassPlural %>Controller : <%= hasDto ? "ViewModel" : "Entity" %>ControllerBase<<%= pascalizedEntityClass %>, I<%= pascalizedEntityClass %>Service, <%= primaryKeyType %>>
{    
    
    private readonly IMapper _mapper;
    
    public <%= pascalizedEntityClassPlural %>Controller(ILogger<<%= pascalizedEntityClassPlural %>Controller> logger,
     IValidateService<<%= pascalizedEntityClass %>> validateService,    
    IMapper mapper,     
    I<%= pascalizedEntityClass %>Service <%= camelCasedEntityClass %>Service) : base(logger, validateService,  <%_ if (hasDto) { _%> mapper, <%_ } _%> <%= camelCasedEntityClass %>Service)
    {      
        _mapper = mapper;
    }
      

    /// <summary>
    /// Search on <%= pascalizedEntityClass %> using ODataQueryOptions
    /// </summary>
    /// <param name="query">ODataQueryOptions for <%= pascalizedEntityClass %></param>
    /// <param name="cancellationToken"></param>
    /// <returns>Paging list of <%= hasDto ? asDto(pascalizedEntityClass) : pascalizedEntityClass  %></returns>
    [HttpGet]
    [Authorize]
    [SwaggerResponse(200, "Paging list of <%= entityClass %>", typeof(PageList<<%= hasDto ? asDto(pascalizedEntityClass) : pascalizedEntityClass %>>))]        
    [SwaggerResponse(401, "User not authorized")]
    [SwaggerResponse(403, "User do not have permission to access")]
    [SwaggerOperation(Tags = new[] { "<%= pascalizedEntityClass %>" }, OperationId = "SearchOn<%= pascalizedEntityClassPlural %>")]
    public virtual Task<IActionResult> Get<%= pascalizedEntityClassPlural %>(ODataQueryOptions<<%= pascalizedEntityClass %>> query, CancellationToken cancellationToken = default)
    => base.GetEntities(query, cancellationToken);

    /// <summary>
    ///  Get <%= pascalizedEntityClass %> by id 
    /// </summary>
    /// <param name="id"><%= pascalizedEntityClass %> Identification</param>
    /// <param name="cancellationToken"></param>
    /// <returns><%= hasDto ? asDto(pascalizedEntityClass) : pascalizedEntityClass %></returns>
    [HttpGet("{id}")]
    [Authorize]
    [SwaggerResponse(200, "Get <%= pascalizedEntityClass %> by Id", typeof(<%= hasDto ? asDto(pascalizedEntityClass) : pascalizedEntityClass %>))]
    [SwaggerResponse(404, "<%= pascalizedEntityClass %> not found for passed Id")]
    [SwaggerResponse(401, "User not authorized")]
    [SwaggerResponse(403, "User do not have permission to access")]
    [SwaggerOperation(Tags = new[] { "<%= pascalizedEntityClass %>" }, OperationId = "Get<%= pascalizedEntityClass %>ById")]        
    public virtual Task<IActionResult> Get<%= pascalizedEntityClass %>([FromRoute] <%= primaryKeyType %> id, [FromQuery] DateTimeOffset? lastUpdatedDate = null, [FromQuery] string expand = null, CancellationToken cancellationToken = default)
    => base.GetEntity(id, lastUpdatedDate, expand, cancellationToken);

    /// <summary>
    ///  Export list of <%= pascalizedEntityClass %>
    /// </summary>
    /// <param name="exportType">Export type</param>
    /// <param name="query">Query filter exported <%= pascalizedEntityClass %></param>
    /// <param name="exportType">Export type</param>
    /// <param name="cancellationToken"></param>
    /// <returns>Exported Document</returns>
    [HttpPost("Export/{exportType}")]
    [Authorize]
    [SwaggerResponse(200, "Export <%= pascalizedEntityClass %> file stream", typeof(<%= hasDto ? asDto(pascalizedEntityClass) : pascalizedEntityClass %>))]            
    [SwaggerResponse(401, "User not authorized")]
    [SwaggerResponse(403, "User do not have permission to access")]
    [SwaggerOperation(Tags = new[] { "<%= pascalizedEntityClass %>" }, OperationId = "Export<%= pascalizedEntityClassPlural %>")]        
    public virtual Task<IActionResult> Export<%= pascalizedEntityClassPlural %>([FromRoute] ExportType exportType, ODataQueryOptions<<%= pascalizedEntityClass %>> query, [FromBody] ExportConfiguration export = null, CancellationToken cancellationToken = default)
    => base.ExportEntities(exportType, query, export, cancellationToken);
    

    /// <summary>
    /// Create Entity 
    /// </summary>
    /// <param name="<%= hasDto ? asDto(camelCasedEntityClass) : camelCasedEntityClass %>">new <%= hasDto ? asDto(pascalizedEntityClass) : pascalizedEntityClass %> to be created</param>
    /// <param name="cancellationToken"></param>
    /// <returns>Created <%= hasDto ? asDto(pascalizedEntityClass) : pascalizedEntityClass %></returns>
    [HttpPost]
    [Authorize]
    [ValidateModel]
    [SwaggerResponse(200, "Created <%= pascalizedEntityClass %>", typeof(<%=pascalizedEntityClass %>))]
    [SwaggerResponse(400, "Invalid create request <%= pascalizedEntityClass %>")]
    [SwaggerResponse(401, "User do not have permission to access")]
    [SwaggerOperation(Tags = new[] { "<%= pascalizedEntityClass %>" }, OperationId = "Create<%= pascalizedEntityClass %>")]        
    public virtual Task<IActionResult> Create<%= pascalizedEntityClass %>([FromBody] <%=  asDto(pascalizedEntityClass) %> <%= asDto(camelCasedEntityClass)%>, CancellationToken cancellationToken = default)
    => base.CreateEntity(_mapper.Map<<%= pascalizedEntityClass %>>(<%= asDto(camelCasedEntityClass)%>), cancellationToken);
    
    /// <summary>
    /// Update <%= pascalizedEntityClass %> complete object's properties
    /// </summary>
    /// <param name="id"><%= pascalizedEntityClass %> identifier</param>
    /// <param name="<%= hasDto ? asDto(camelCasedEntityClass) : camelCasedEntityClass %>"></param>
    /// <param name="cancellationToken"></param>
    /// <returns>Updated <%= hasDto ? asDto(pascalizedEntityClass) : pascalizedEntityClass %></returns>
    [HttpPut("{id}")]
    [Authorize]
    [ValidateModel]
    [SwaggerResponse(200, "Update <%= pascalizedEntityClass %>", typeof(<%= hasDto ? asDto(pascalizedEntityClass) : pascalizedEntityClass %>))]
    [SwaggerResponse(404, "<%= pascalizedEntityClass %> not found for passed Id")]
    [SwaggerResponse(400, "Invalid update request <%= pascalizedEntityClass %>")]
    [SwaggerResponse(401, "User not authorized")]
    [SwaggerResponse(403, "User do not have permission to access")]
    [SwaggerOperation(Tags = new[] { "<%= pascalizedEntityClass %>" }, OperationId = "Update<%= pascalizedEntityClass %>")]              
    public virtual Task<IActionResult> Update<%= pascalizedEntityClass %>([FromRoute] <%= primaryKeyType %> id, [FromBody] <%= hasDto ? asDto(pascalizedEntityClass) : pascalizedEntityClass %> <%= hasDto ? asDto(camelCasedEntityClass) : camelCasedEntityClass %>, CancellationToken cancellationToken = default)
    => base.UpdateEntity(id, <%= hasDto ? asDto(camelCasedEntityClass) : camelCasedEntityClass %>, cancellationToken);

    /// <summary>
    /// Partially update <%= pascalizedEntityClass %> using patch document
    /// </summary>
    /// <param name="id"><%= pascalizedEntityClass %> identifier</param>
    /// <param name=""></param>
    /// <param name="cancellationToken"></param>
    /// <returns>Updated <%= hasDto ? asDto(pascalizedEntityClass) : pascalizedEntityClass %></returns>
    [HttpPatch("{id}")]
    [Authorize]
    [ValidateModel]
    [SwaggerResponse(200, "Partially update changes using patch for <%= pascalizedEntityClass %>", typeof(<%= hasDto ? asDto(pascalizedEntityClass) : pascalizedEntityClass %>))]
    [SwaggerResponse(404, "<%= pascalizedEntityClass %> not found for passed Id")]
    [SwaggerResponse(400, "Invalid update patch request <%= pascalizedEntityClass %>")]
    [SwaggerResponse(401, "User not authorized")]
    [SwaggerResponse(403, "User do not have permission to access")]
    [SwaggerOperation(Tags = new[] { "<%= pascalizedEntityClass %>" }, OperationId = "Update<%= pascalizedEntityClass %>Changes")]             
    public virtual Task<IActionResult> Patch<%= pascalizedEntityClass %>([FromRoute] <%= primaryKeyType %> id, [FromBody] JsonPatchDocument<<%= hasDto ? asDto(pascalizedEntityClass) : pascalizedEntityClass %>> changes, CancellationToken cancellationToken = default(CancellationToken))
    => base.PatchEntity(id, changes, cancellationToken);

    /// <summary>
    /// Partially update <%= pascalizedEntityClass %> using josn document
    /// </summary>
    /// <param name="id"><%= pascalizedEntityClass %> identifier</param>
    /// <param name=""></param>
    /// <param name="cancellationToken"></param>
    /// <returns>Updated <%= hasDto ? asDto(pascalizedEntityClass) : pascalizedEntityClass %></returns>
    [HttpPatch("{id}/Json")]
    [Authorize]
    [ValidateModel]
    [SwaggerResponse(200, "Partially update changes using json object for <%= pascalizedEntityClass %>", typeof(<%= hasDto ? asDto(pascalizedEntityClass) : pascalizedEntityClass %>))]
    [SwaggerResponse(404, "<%= pascalizedEntityClass %> not found for passed Id")]
    [SwaggerResponse(400, "Invalid update patch request <%= pascalizedEntityClass %>")]
    [SwaggerResponse(401, "User not authorized")]
    [SwaggerResponse(403, "User do not have permission to access")]
    [SwaggerOperation(Tags = new[] { "<%= pascalizedEntityClass %>" }, OperationId = "Update<%= pascalizedEntityClass %>ChangesByJson")]        
    public virtual Task<IActionResult> Patch<%= pascalizedEntityClass %>ByJson([FromRoute] <%= primaryKeyType %> id, [FromBody] JObject changes, CancellationToken cancellationToken = default(CancellationToken))
    => base.PatchEntityByJson(id, changes, cancellationToken);

    /// <summary>
    /// Delete Entities (soft Delete)
    /// </summary>
    /// <param name="id"></param>
    /// <param name="cancellationToken"></param>
    /// <returns></returns>
    [HttpDelete("{id}")]        
    [Authorize]        
    [SwaggerResponse(200, "Delete <%= pascalizedEntityClass %>", typeof(GenericResponseViewModel))]
    [SwaggerResponse(404, "<%= pascalizedEntityClass %> not found for passed Id")]
    [SwaggerResponse(412, "Can't delete <%= pascalizedEntityClass %>")]
    [SwaggerResponse(401, "User not authorized")]
    [SwaggerResponse(403, "User do not have permission to access")]
    [SwaggerOperation(Tags = new[] { "<%= pascalizedEntityClass %>" }, OperationId = "Delete<%= pascalizedEntityClass %>")]                
    public virtual Task<IActionResult> Delete<%= pascalizedEntityClass %>([FromRoute] <%= primaryKeyType %> id, CancellationToken cancellationToken = default)
    => base.DeleteEntity(id, cancellationToken);

    /// <summary>
    /// Delete <%= pascalizedEntityClass %> (soft Delete)
    /// </summary>
    /// <param name="id"></param>
    /// <param name="cancellationToken"></param>
    /// <returns></returns>
    [HttpDelete]     
    [Authorize]        
    [SwaggerResponse(200, "Delete <%= pascalizedEntityClassPlural %>", typeof(GenericResponseViewModel))]
    [SwaggerResponse(412, "Can't delete <%= pascalizedEntityClassPlural %>")]
    [SwaggerResponse(401, "User not authorized")]
    [SwaggerResponse(403, "User do not have permission to access")]
    [SwaggerOperation(Tags = new[] { "<%= pascalizedEntityClass %>" }, OperationId = "Delete<%= pascalizedEntityClassPlural %>")]     
    public virtual Task<IActionResult> Delete([FromBody] IEnumerable<<%= primaryKeyType %>> ids, CancellationToken cancellationToken = default)
    => base.DeleteEntities(ids, cancellationToken);
}
