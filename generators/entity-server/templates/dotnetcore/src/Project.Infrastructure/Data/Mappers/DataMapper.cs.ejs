<%_ let importJsonIgnore = false;
const hasManyToMany = entityClassHasManyToMany;
const entityTableName = snakeCasedEntityClass;
const entityClassName = pascalizedEntityClass;
const entityVariableName = camelCasedEntityClass; _%>

namespace <%= namespace %>.Infrastructure.Data.Mappers;

internal static class <%= entityClassName %>DataMapper
{
    public static void DataMapperBuilder(this EntityTypeBuilder<<%= entityClassName %>> builder)
    {
        builder.ToTable("<%= entityTableName %>");
        builder.BasicEntityBuilder<<%= entityClassName %>,<%= primaryKeyType %>>();
        <%_ fields.forEach(field => {           
            if (entity.name == entityClass && field.fieldIsEnum){ _%>
        builder.Property(p => p.<%= field.fieldNamePascalized %>)
        .HasConversion<string>();
        <%_ }
        if (entity.name == entityClass && field.fieldType == 'TextBlock'){ _%>
            builder.Property(p => p.Changes).HasConversion(c => c?.ToString(), c => c != null ? JObject.Parse(a) : null);
        <%_ }        
        });
        _%>
        // TODO add other properties mapping
        <%_
        if(entity.name.toUpperCase() == entityClass.toUpperCase()) {
            entity.relationships.forEach(relationship => {
                let relationshipNamePascalized = toPascalCase(relationship.relationshipName);
                let relationshipNamePascalizedPlural = pluralize(relationshipNamePascalized);
                let relationshipFieldNamePascalizedPlural = relationship.relationshipFieldNamePascalizedPlural;
                let otherEntityRelationshipNamePascalized = toPascalCase(relationship.otherEntityRelationshipName);
                let otherEntityRelationshipNamePascalizedPlural = pluralize(otherEntityRelationshipNamePascalized);
                let joinEntityClassNamePascalized = otherEntityRelationshipNamePascalized + relationshipNamePascalized;
                let joinEntityClassNamePascalizedPlural = pluralize(joinEntityClassNamePascalized);
                let entityClassNamePascalized = entity.name;
                let entityClassNamePascalizedPlural = pluralize(entity.name);
                let otherEntityClassNamePascalized = toPascalCase(relationship.otherEntityName);
                let otherEntityClassNamePascalizedPlural = pluralize(otherEntityClassNamePascalized);
                let ownerRelationshipFieldName = entityClassNamePascalized;
                let nonOwnerRelationshipFieldName = otherEntityClassNamePascalized;
                if (relationship.relationshipType === 'many-to-many') {
                    // executed when importing entities by jdl (jhipster import-jdl fileName.jdl)
                    if (relationship.ownerSide) {
             _%>
        builder.HasMany(x => x.<%= relationshipNamePascalizedPlural %>)
            .WithMany(x => x.<%= otherEntityRelationshipNamePascalizedPlural %>)
            .UsingEntity<Dictionary<string, object>>(
                "<%= joinEntityClassNamePascalizedPlural %>",
                x => x.HasOne<<%= nonOwnerRelationshipFieldName %>>().WithMany(),
                x => x.HasOne<<%= ownerRelationshipFieldName %>>().WithMany());

                        <%_ }
                } else if (relationship.relationshipType === 'one-to-many') {
                    // executed when importing entities by jdl (jhipster import-jdl fileName.jdl)
                    if (relationship.ownerSide) {
            _%>
        builder.HasOne(x => x.<%= relationshipNamePascalized %>)
            .WithMany(x => x.<%= otherEntityRelationshipNamePascalizedPlural %>)
            .HasForeignKey(x => x.<%= relationship.relationshipNamePascalized %>Id)
            .OnDelete(DeleteBehavior.NoAction);                                                
                <%_ } else { _%>                                        
        builder.HasMany(x => x.<%= relationshipNamePascalizedPlural %>)
            .WithOne(x => x.<%= otherEntityRelationshipNamePascalized %>)
            .HasForeignKey(x => x.<%= relationship.otherEntityRelationshipNamePascalized %>Id)
            .OnDelete(DeleteBehavior.NoAction);
                <%_ }

                } else if (relationship.relationshipType === 'many-to-one') {
                    // executed when importing entities by jdl (jhipster import-jdl fileName.jdl)
                    if (relationship.ownerSide) {
            _%>
        builder.HasOne(x => x.<%= otherEntityClassNamePascalized %>)
            .WithMany(x => x.<%= otherEntityRelationshipNamePascalizedPlural %>)
            .HasForeignKey(x => x.<%= relationship.relationshipNamePascalized %>Id)
            .OnDelete(DeleteBehavior.NoAction);
                <%_ }
                } else if (relationship.relationshipType === 'one-to-one') {
                    // executed when importing entities by jdl (jhipster import-jdl fileName.jdl)
                    if (relationship.ownerSide) {
            _%>
        builder.HasOne(x => x.<%= relationshipNamePascalized %>)
            .WithOne(x => x.<%= otherEntityRelationshipNamePascalized %>)
            .HasForeignKey<<%= entityClassNamePascalized %>>(x => x.<%= relationship.relationshipNamePascalized %>Id)
            .OnDelete(DeleteBehavior.NoAction);
            <%_ }                
            }
        })
    }_%>
       
    }
}

