<%#
 Copyright 2019-2021 the original author or authors from the JHipster project.
 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%_ if (cqrsEnabled) { _%>
    using MediatR;
    <%_ } _%>
    using AutoMapper;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using JHipsterNet.Core.Pagination;
    using JHipsterNet.Core.Pagination.Extensions;
    using <%= namespace %>.Domain;
    using <%= namespace %>.Security;
    using <%= namespace %>.Domain.Services.Interfaces;
    using <%= namespace %>.ViewModel;
    using <%= namespace %>.Web.Extensions;
    using <%= namespace %>.Web.Filters;
    using <%= namespace %>.Web.Rest.Problems;
    using <%= namespace %>.Web.Rest.Utilities;
    using <%= namespace %>.Crosscutting.Constants;
    using <%= namespace %>.Crosscutting.Exceptions;
    <%_ if (cqrsEnabled) { _%>
    using <%= namespace %>.Application.Queries;
    using <%= namespace %>.Application.Commands;
    <%_ } _%>
    using Microsoft.AspNetCore.Authorization;
    using Microsoft.AspNetCore.Identity;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.Extensions.Logging;
    using Microsoft.EntityFrameworkCore;
    
    namespace <%= namespace %>.Controllers
    {
        [Authorize]
        [Route("api/admin/[controller]")]
        [ApiController]
        public class UsersController : ControllerBase
        {
            private readonly ILogger<UsersController> _log;
            <%_ if (cqrsEnabled) { _%>
            private readonly IMediator _mediator;
            <%_ } else { _%>
            private readonly IMapper _mapper;
            private readonly IMailService _mailService;
            private readonly UserManager<User> _userManager;
            private readonly IUserService _userService;
            <%_ } _%>
    
            <%_ if (cqrsEnabled) { _%>
            public UsersController(ILogger<UsersController> log, IMediator mediator)
            {
                _log = log;
                _mediator = mediator;
            }
            <%_ } else { _%>
            public UsersController(ILogger<UsersController> log, UserManager<User> userManager, IUserService userService,
                IMapper mapper, IMailService mailService)
            {
                _log = log;
                _userManager = userManager;
                _userService = userService;
                _mailService = mailService;
                _mapper = mapper;
            }
            <%_ } _%>
    
            [HttpPost]
            [ValidateModel]
            public async Task<ActionResult<User>> CreateUser([FromBody] UserViewModel userViewModel)
            {
                _log.LogDebug($"REST request to save User : {userViewModel}");
                if (userViewModel.Id != null)
                    throw new BadRequestAlertException("A new user cannot already have an ID", "userManagement",
                        "idexists");
                <%_ if (cqrsEnabled) { _%>
                var newUser = await _mediator.Send(new UserCreateCommand { UserViewModel = userViewModel });
                <%_ } else { _%>
                // Lowercase the user login before comparing with database
                if (await _userManager.FindByNameAsync(userViewModel.Login.ToLowerInvariant()) != null)
                    throw new LoginAlreadyUsedException();
                if (await _userManager.FindByEmailAsync(userViewModel.Email.ToLowerInvariant()) != null)
                    throw new EmailAlreadyUsedException();
    
                var newUser = await _userService.CreateUser(_mapper.Map<User>(userViewModel));
                await _mailService.SendCreationEmail(newUser);
                <%_ } _%>
                return CreatedAtAction(nameof(GetUser), new { login = newUser.Login }, newUser)
                    .WithHeaders(HeaderUtil.CreateEntityCreationAlert("userManagement.created", newUser.Login));
            }
    
            [HttpPut]
            [ValidateModel]
            public async Task<IActionResult> UpdateUser([FromBody] UserViewModel userViewModel)
            {
                _log.LogDebug($"REST request to update User : {userViewModel}");
                <%_ if (cqrsEnabled) { _%>
                var updatedUser = await _mediator.Send(new UserUpdateCommand { UserViewModel = userViewModel });
                <%_ } else { _%>
                var existingUser = await _userManager.FindByEmailAsync(userViewModel.Email);
                if (existingUser != null && !existingUser.Id.Equals(userViewModel.Id)) throw new EmailAlreadyUsedException();
                existingUser = await _userManager.FindByNameAsync(userViewModel.Login);
                if (existingUser != null && !existingUser.Id.Equals(userViewModel.Id)) throw new LoginAlreadyUsedException();
    
                var updatedUser = await _userService.UpdateUser(_mapper.Map<User>(userViewModel));
                <%_ } _%>
    
                return ActionResultUtil.WrapOrNotFound(updatedUser)
                    .WithHeaders(HeaderUtil.CreateAlert("userManagement.updated", userViewModel.Login));
            }
    
            [HttpGet]
            public async Task<ActionResult<IEnumerable<User>>> GetAllUsers(IPageable pageable)
            {
                _log.LogDebug("REST request to get a page of Users");
                <%_ if (cqrsEnabled) { _%>
                (var headers, var userViewModels) = await _mediator.Send(new UserGetAllQuery { Page = pageable });
                <%_ } else { _%>
                var page = await _userManager.Users
                    .Include(it => it.UserRoles)
                    .ThenInclude(r => r.Role)
                    .UsePageableAsync(pageable);
                var userViewModels = page.Content.Select(user => _mapper.Map<UserViewModel>(user));
                var headers = page.GeneratePaginationHttpHeaders();
                <%_ } _%>
                return Ok(userViewModels).WithHeaders(headers);
            }
    
            [HttpGet("authorities")]
            [Authorize(Roles = RolesConstants.ADMIN)]
            <%_ if (cqrsEnabled) { _%>
            public async Task<ActionResult<IEnumerable<string>>> GetAuthorities()
            {
                return Ok(await _mediator.Send(new UserGetAuthoritiesQuery()));
            }
            <%_ } else { _%>
            public ActionResult<IEnumerable<string>> GetAuthorities()
            {
                return Ok(_userService.GetAuthorities());
            }
            <%_ } _%>
    
            [HttpGet("{login}")]
            public async Task<IActionResult> GetUser([FromRoute] string login)
            {
                _log.LogDebug($"REST request to get User : {login}");
                <%_ if (cqrsEnabled) { _%>
                var userViewModel = await _mediator.Send(new UserGetQuery { Login = login });
                <%_ } else { _%>
                var result = await _userManager.Users
                    .Where(user => user.Login == login)
                    .Include(it => it.UserRoles)
                    .ThenInclude(r => r.Role)
                    .SingleOrDefaultAsync();
                var userViewModel = _mapper.Map<UserViewModel>(result);
                <%_ } _%>
                return ActionResultUtil.WrapOrNotFound(userViewModel);
            }
    
            [HttpDelete("{login}")]
            [Authorize(Roles = RolesConstants.ADMIN)]
            public async Task<IActionResult> DeleteUser([FromRoute] string login)
            {
                _log.LogDebug($"REST request to delete User : {login}");
                <%_ if (cqrsEnabled) { _%>
                await _mediator.Send(new UserDeleteCommand { Login = login });
                <%_ } else { _%>
                await _userService.DeleteUser(login);
                <%_ } _%>
                return NoContent().WithHeaders(HeaderUtil.CreateEntityDeletionAlert("userManagement.deleted", login));
            }
        }
    }
    