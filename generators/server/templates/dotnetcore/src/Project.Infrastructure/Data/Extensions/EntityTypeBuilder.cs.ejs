

namespace <%= namespace %>.Infrastructure.Data.Extensions;

public static class EntityTypeBuilder
{
    public static EntityTypeBuilder<TEntity> BasicEntityBuilder<TEntity,TKey>(
        this EntityTypeBuilder<TEntity> entityTypeBuilder) where TEntity : Entity<TKey>

    {        
        entityTypeBuilder.Property(p => p.Id).ValueGeneratedOnAdd();        
        entityTypeBuilder.Key(p => p.Id);   
        entityTypeBuilder.Property(p => p.CreatedBy).HasMaxLength(50);
        entityTypeBuilder.Property(p => p.UpdatedBy).HasMaxLength(50);
        entityTypeBuilder.Property(p => p.ExtraProperties).HasConversion(e => e.Serialize(),
            e => e.Deserialize<IDictionary<string, object>>(),
            new ValueComparer<IDictionary<string, object>>(
                (x, y) => x != null && y != null ? x.SequenceEqual(y) : x == null && y == null,
                x => x.GetHashCode()));
        return entityTypeBuilder;
    }
}
